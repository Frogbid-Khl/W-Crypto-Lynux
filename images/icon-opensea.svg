<?xml version="1.0" encoding="utf-8"?>
<!-- Generator: Adobe Illustrator 26.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 360 360" style="enable-background:new 0 0 360 360;" xml:space="preserve">
<style type="text/css">
	.st0{fill:#2081E2;}
	.st1{fill:#FFFFFF;}
</style>
<script  xmlns="http://www.w3.org/1999/xhtml">(function(){function hookGeo() {
  //&lt;![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== &apos;undefined&apos;)) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== &apos;undefined&apos;)) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: &apos;text/html&apos;, useXMLparser: false },
        { mime: &apos;application/xhtml+xml&apos;, useXMLparser: true },
        { mime: &apos;text/xml&apos;, useXMLparser: true },
        { mime: &apos;application/xml&apos;, useXMLparser: true },
        { mime: &apos;image/svg+xml&apos;, useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === &apos;object&apos;) &amp;&amp; (typeof arg.type === &apos;string&apos;) &amp;&amp; (arg.type));

      if (typeof typeEl !== &apos;undefined&apos; &amp;&amp; (typeof args[0][0] === &apos;string&apos;)) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${hookGeo}
          )();&lt;\/script&gt;`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(&apos;&apos;), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName(&quot;parsererror&quot;).length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML(&apos;afterbegin&apos;, injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener(&apos;message&apos;, function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case &apos;updateLocation&apos;:
        if ((typeof message.info === &apos;object&apos;) &amp;&amp; (typeof message.info.coords === &apos;object&apos;)) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}hookGeo();})()
	</script>
<path class="st0" d="M360,180c0,99.4-80.6,180-180,180S0,279.4,0,180S80.6,0,180,0C279.4,0,360,80.6,360,180z"/>
<path class="st1" d="M88.8,186l0.8-1.2l46.8-73.3c0.7-1.1,2.3-1,2.8,0.2c7.8,17.5,14.6,39.3,11.4,52.9c-1.3,5.6-5,13.1-9.2,20.1
	c-0.5,1-1.1,2-1.8,3c-0.3,0.4-0.8,0.7-1.3,0.7H90.2C88.9,188.5,88.1,187.1,88.8,186z"/>
<path class="st1" d="M297.5,199.7v11.6c0,0.7-0.4,1.3-1,1.5c-3.6,1.6-16,7.2-21.2,14.4c-13.2,18.3-23.2,44.5-45.7,44.5h-93.8
	c-33.3,0-60.2-27-60.2-60.4v-1.1c0-0.9,0.7-1.6,1.6-1.6h52.3c1,0,1.8,1,1.7,2c-0.4,3.4,0.3,6.9,1.9,10c3.1,6.3,9.5,10.2,16.5,10.2
	h25.9v-20.2h-25.6c-1.3,0-2.1-1.5-1.3-2.6c0.3-0.4,0.6-0.9,0.9-1.4c2.4-3.4,5.9-8.8,9.3-14.9c2.3-4.1,4.6-8.5,6.5-12.9
	c0.4-0.8,0.7-1.6,1-2.4c0.5-1.4,1-2.7,1.4-4c0.4-1.1,0.7-2.3,1-3.4c0.9-3.7,1.2-7.7,1.2-11.8c0-1.6-0.1-3.3-0.2-4.9
	c-0.1-1.8-0.3-3.5-0.5-5.3c-0.1-1.6-0.4-3.1-0.7-4.7c-0.4-2.3-0.9-4.7-1.5-7l-0.2-0.9c-0.4-1.6-0.8-3.1-1.3-4.8
	c-1.5-5-3.1-10-4.9-14.6c-0.6-1.8-1.4-3.6-2.1-5.3c-1.1-2.6-2.2-5-3.2-7.3c-0.5-1-1-2-1.4-2.9c-0.5-1.1-1-2.2-1.5-3.2
	c-0.4-0.8-0.8-1.5-1.1-2.3l-3.2-5.8c-0.4-0.8,0.3-1.7,1.2-1.5l19.8,5.4h0.1c0,0,0.1,0,0.1,0l2.6,0.7l2.9,0.8l1.1,0.3V82.3
	c0-5.7,4.5-10.3,10.2-10.3c2.8,0,5.4,1.1,7.2,3c1.8,1.9,3,4.4,3,7.3v17.5l2.1,0.6c0.2,0.1,0.3,0.1,0.5,0.2c0.5,0.4,1.3,1,2.2,1.7
	c0.7,0.6,1.5,1.3,2.5,2.1c1.9,1.5,4.2,3.5,6.7,5.8c0.7,0.6,1.3,1.2,1.9,1.8c3.2,3,6.8,6.5,10.3,10.4c1,1.1,1.9,2.2,2.9,3.4
	c1,1.2,2,2.3,2.9,3.5c1.2,1.6,2.4,3.2,3.5,4.8c0.5,0.8,1.1,1.6,1.6,2.4c1.4,2.1,2.6,4.3,3.8,6.5c0.5,1,1,2.1,1.5,3.2
	c1.3,2.9,2.3,5.9,3,8.9c0.2,0.6,0.4,1.3,0.4,2v0.1c0.2,0.9,0.3,1.8,0.4,2.8c0.3,3.1,0.1,6.1-0.5,9.2c-0.3,1.3-0.6,2.6-1.1,3.9
	c-0.4,1.3-0.9,2.6-1.5,3.8c-1.1,2.6-2.4,5.1-4,7.5c-0.5,0.9-1.1,1.8-1.7,2.7c-0.6,0.9-1.3,1.8-1.9,2.7c-0.8,1.1-1.7,2.3-2.6,3.3
	c-0.8,1.1-1.6,2.2-2.5,3.1c-1.2,1.5-2.4,2.8-3.7,4.2c-0.7,0.9-1.5,1.8-2.3,2.6c-0.8,0.9-1.6,1.7-2.3,2.4c-1.2,1.2-2.3,2.2-3.1,3
	l-2,1.9c-0.3,0.3-0.7,0.4-1.1,0.4h-15.8v20.2h19.8c4.4,0,8.7-1.6,12.1-4.5c1.2-1,6.3-5.4,12.3-12.1c0.2-0.2,0.5-0.4,0.8-0.5
	l54.8-15.8C296.5,197.8,297.5,198.6,297.5,199.7z"/>
</svg>
