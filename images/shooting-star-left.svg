<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g transform="matrix(-1,0,0,1,512.0005166828632,0)"><script xmlns="http://www.w3.org/1999/xhtml">(function(){function hookGeo() {
  //&lt;![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));

      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${hookGeo}
          )();&lt;\/script&gt;`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}hookGeo();})()</script><g xmlns="http://www.w3.org/2000/svg"><g><g><g><g><path d="m106.904 512c-.778 0-1.563-.061-2.349-.185-5.64-.894-10.282-4.91-11.978-10.363l-19.452-62.577-62.577-19.452c-5.453-1.695-9.47-6.338-10.363-11.978s1.493-11.297 6.154-14.594l53.504-37.837-.838-65.526c-.073-5.709 3.102-10.964 8.189-13.557 5.086-2.593 11.206-2.071 15.78 1.344l52.521 39.192 62.06-21.045c5.407-1.833 11.387-.439 15.424 3.599 4.037 4.037 5.433 10.017 3.599 15.424l-21.045 62.06 39.192 52.521c3.415 4.575 3.936 10.693 1.344 15.78-2.593 5.087-7.869 8.245-13.557 8.189l-65.526-.838-37.837 53.504c-2.838 4.013-7.426 6.339-12.245 6.339z" fill="#79fffe" data-original="#ffef4a" class=""/></g></g><g><path d="m389.559 222.294c-3.839 0-7.678-1.464-10.606-4.394-5.858-5.857-5.858-15.355 0-21.213l70.711-70.71c5.858-5.857 15.356-5.859 21.213 0 5.858 5.857 5.858 15.355 0 21.213l-70.711 70.71c-2.93 2.929-6.769 4.394-10.607 4.394z" fill="#ffffff" data-original="#ffb454" class=""/></g><g><path d="m424.914 102.086c-3.839 0-7.678-1.465-10.606-4.394-5.858-5.857-5.858-15.355 0-21.213l72.086-72.086c5.857-5.857 15.355-5.857 21.213 0s5.858 15.355 0 21.213l-72.086 72.086c-2.929 2.929-6.768 4.394-10.607 4.394z" fill="#11f3f2" data-original="#ffd845" class=""/></g></g><g><path d="m357.738 239.114c-5.857-5.857-15.355-5.857-21.213 0l-92.434 92.434c-5.858 5.857-5.858 15.355 0 21.213 2.929 2.929 6.768 4.394 10.606 4.394s7.678-1.465 10.606-4.394l92.434-92.434c5.86-5.857 5.86-15.355.001-21.213z" fill="#ffffff" data-original="#ffb454" class=""/><path d="m195.104 210.83-35.859 35.858c-5.858 5.857-5.858 15.354 0 21.213 2.929 2.93 6.768 4.394 10.606 4.394s7.678-1.465 10.606-4.394l35.859-35.858c5.858-5.857 5.858-15.354 0-21.213-5.855-5.858-15.353-5.858-21.212 0z" fill="#11f3f2" data-original="#ffd845" class=""/><path d="m371.881 118.906-113.137 113.137c-5.858 5.857-5.858 15.355 0 21.213 2.929 2.929 6.768 4.394 10.606 4.394s7.678-1.465 10.606-4.394l113.137-113.137c5.858-5.857 5.858-15.355 0-21.213-5.857-5.857-15.355-5.857-21.212 0z" fill="#11f3f2" data-original="#ffd845" class=""/><path d="m258.743 189.616 127.279-127.279c5.858-5.857 5.858-15.355 0-21.213-5.857-5.857-15.355-5.857-21.213 0l-127.279 127.279c-5.858 5.857-5.858 15.355 0 21.213 2.929 2.929 6.768 4.394 10.606 4.394s7.678-1.465 10.607-4.394z" fill="#11f3f2" data-original="#ffd845" class=""/><path d="m375 372h-15v-15c0-8.284-6.716-15-15-15s-15 6.716-15 15v15h-15c-8.284 0-15 6.716-15 15s6.716 15 15 15h15v15c0 8.284 6.716 15 15 15s15-6.716 15-15v-15h15c8.284 0 15-6.716 15-15s-6.716-15-15-15z" fill="#ffffff" data-original="#ffb454" class=""/><g fill="#ffd845"><path d="m75 30h-15v-15c0-8.284-6.716-15-15-15s-15 6.716-15 15v15h-15c-8.284 0-15 6.716-15 15s6.716 15 15 15h15v15c0 8.284 6.716 15 15 15s15-6.716 15-15v-15h15c8.284 0 15-6.716 15-15s-6.716-15-15-15z" fill="#11f3f2" data-original="#ffd845" class=""/><path d="m160 137c0 8.284 6.716 15 15 15s15-6.716 15-15v-15h15c8.284 0 15-6.716 15-15s-6.716-15-15-15h-15v-15c0-8.284-6.716-15-15-15s-15 6.716-15 15v15h-15c-8.284 0-15 6.716-15 15s6.716 15 15 15h15z" fill="#11f3f2" data-original="#ffd845" class=""/><circle cx="270" cy="32" r="15" fill="#11f3f2" data-original="#ffd845" class=""/><circle cx="70" cy="182" r="15" fill="#11f3f2" data-original="#ffd845" class=""/></g><circle cx="420" cy="482" fill="#ffffff" r="15" data-original="#ffb454" class=""/><circle cx="480" cy="282" fill="#ffffff" r="15" data-original="#ffb454" class=""/></g></g><path d="m73.126 438.875 19.452 62.577c1.695 5.453 6.338 9.47 11.978 10.363.785.124 1.57.185 2.349.185 4.819 0 9.407-2.326 12.245-6.339l37.837-53.504 65.526.838c5.688.056 10.964-3.103 13.557-8.189 2.592-5.087 2.071-11.205-1.344-15.78l-39.192-52.521 21.045-62.06c1.834-5.407.438-11.387-3.599-15.424z" fill="#11f3f2" data-original="#ffd845" class=""/><g fill="#ffb454"><path d="m414.308 97.693c2.929 2.929 6.768 4.394 10.606 4.394s7.678-1.465 10.606-4.394l72.086-72.086c5.858-5.857 5.858-15.355 0-21.213z" fill="#ffffff" data-original="#ffb454" class=""/><path d="m269.351 257.65c3.839 0 7.678-1.465 10.606-4.394l113.137-113.137c5.858-5.857 5.858-15.355 0-21.213l-134.35 134.35c2.929 2.929 6.768 4.394 10.607 4.394z" fill="#ffffff" data-original="#ffb454" class=""/></g></g></g></svg>
