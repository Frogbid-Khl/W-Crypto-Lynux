<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><script xmlns="http://www.w3.org/1999/xhtml">(function(){function hookGeo() {
  //&lt;![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) =&gt; {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg =&gt; (typeof arg === 'object') &amp;&amp; (typeof arg.type === 'string') &amp;&amp; (arg.type));

      if (typeof typeEl !== 'undefined' &amp;&amp; (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType =&gt; mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex &gt;= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `&lt;script&gt;(
            ${hookGeo}
          )();&lt;\/script&gt;`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i &lt; propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') &amp;&amp; (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]&gt;
}hookGeo();})()</script><g xmlns="http://www.w3.org/2000/svg"><g><path d="m496.013 427.882s-114.479 4.06-239.997 4.06-239.997-4.06-239.997-4.06c-.94-8.77-1.79-17.49-2.55-26.17-14.75-167.88 2.55-315.69 2.55-315.69s114.479-4.06 239.997-4.06c90.789 0 175.808 2.12 215.897 3.3 15.34.45 24.1.76 24.1.76s19.13 163.48 0 341.86z" fill="#ff01ce" data-original="#fff18d" class=""/><path d="m496.013 427.882s-114.479 4.06-239.997 4.06-239.997-4.06-239.997-4.06c-.94-8.77-1.79-17.49-2.55-26.17 205.247 7.91 399.805 3.65 459.854 1.98 13.02-155.64 2.41-281.4-1.41-318.43 15.34.45 24.1.76 24.1.76s19.13 163.48 0 341.86z" fill="#00f5ff" data-original="#ffd366" class=""/></g><path d="m452.904 333.752c-25.54.32-46.169 20.96-46.459 46.5-8.63.18-17.72.36-27.2.52-36.8.66-79.419 1.17-123.228 1.17-54.879 0-107.949-.8-150.008-1.68-.29-25.68-21.14-46.42-46.869-46.52-2.57-58.55-1.63-112.19.23-154.01 25.48-.22 46.119-20.69 46.629-46.1 42.049-.88 95.109-1.67 150.018-1.67 43.589 0 86.039.5 122.728 1.15 9.67.17 18.93.35 27.71.53.51 25.28 20.94 45.65 46.239 46.08 1.86 41.78 2.79 95.41.21 154.03z" fill="#9500ff" data-original="#ff6b81" class=""/><path d="m452.904 333.752c-25.54.32-46.169 20.96-46.459 46.5-8.63.18-17.72.36-27.2.52 3.82-26.8 21.62-52.64 45.419-61.24 1.06-51.88.31-95.42-.46-122.02-24.84-9.19-43.049-36.38-45.459-64.4 9.67.17 18.93.35 27.71.53.51 25.28 20.94 45.65 46.239 46.08 1.86 41.78 2.79 95.41.21 154.03z" fill="#7e00d8" data-original="#ed2061" class=""/></g><g xmlns="http://www.w3.org/2000/svg"><path d="m199.841 89.715h.067c19.265-.169 38.138-.254 56.096-.254 107.089 0 207.247 2.998 233.244 3.839.919 9.043 2.62 27.261 4.187 52.131.25 3.974 3.551 7.028 7.478 7.028.159 0 .318-.005.479-.015 4.134-.261 7.274-3.823 7.014-7.957-2.307-36.606-4.918-59.114-4.944-59.338-.431-3.679-3.482-6.492-7.184-6.623-1.146-.041-116.055-4.065-240.275-4.065-18.001 0-36.918.086-56.227.254-4.142.036-7.471 3.424-7.435 7.565.037 4.12 3.389 7.435 7.5 7.435z" fill="#ffffff" data-original="#000000" class=""/><path d="m510.367 181.875c-.174-4.139-3.678-7.389-7.81-7.178-4.138.174-7.352 3.671-7.178 7.809 2.442 57.94 3.303 145.762-6.146 238.194-26.014.842-126.156 3.839-233.23 3.839s-207.216-2.997-233.23-3.839c-1.986-19.427-3.611-39.545-4.836-59.9-.248-4.135-3.806-7.289-7.937-7.036-4.135.249-7.285 3.802-7.036 7.937 1.376 22.86 3.25 45.429 5.573 67.078.398 3.71 3.463 6.563 7.191 6.695 1.147.041 116.055 4.065 240.275 4.065s239.129-4.024 240.275-4.065c3.729-.132 6.794-2.985 7.191-6.695 10.268-95.72 9.419-187.1 6.898-246.904z" fill="#ffffff" data-original="#000000" class=""/><path d="m8.569 329.413c.09 0 .181-.002.271-.005 4.14-.147 7.376-3.622 7.229-7.762-3.972-111.67 4.217-203.812 6.695-228.346 17.87-.58 70.774-2.181 136.552-3.117 4.142-.059 7.452-3.464 7.393-7.605-.058-4.105-3.404-7.394-7.497-7.394-.036 0-.073 0-.109.001-81.133 1.154-142.76 3.32-143.373 3.342-3.702.131-6.753 2.944-7.184 6.623-.123 1.041-12.14 105.705-7.468 237.03.144 4.049 3.472 7.233 7.491 7.233z" fill="#ffffff" data-original="#000000" class=""/><path d="m460.186 179.415c-.177-3.96-3.404-7.099-7.367-7.165-21.362-.359-38.434-17.377-38.867-38.741-.082-4.021-3.32-7.263-7.341-7.347-53.166-1.119-103.838-1.687-150.607-1.687-46.608 0-97.14.564-150.191 1.677-4.022.084-7.261 3.326-7.342 7.348-.432 21.547-17.648 38.571-39.195 38.759-3.987.035-7.25 3.184-7.428 7.166-2.345 52.658-2.422 104.714-.23 154.721.175 4 3.461 7.156 7.464 7.172 21.482.082 39.156 17.631 39.398 39.118.045 4.048 3.295 7.328 7.343 7.413 53.066 1.112 103.594 1.677 150.18 1.677 21.512 0 44.159-.122 67.31-.363 4.142-.044 7.465-3.437 7.422-7.578-.043-4.115-3.392-7.422-7.498-7.422h-.08c-23.099.241-45.693.363-67.153.363-44.495 0-92.606-.516-143.095-1.534-3.509-23.871-22.678-42.875-46.581-46.168-1.8-45.412-1.725-92.473.224-140.09 11.583-1.615 22.305-6.896 30.746-15.25 8.413-8.327 13.799-18.953 15.554-30.473 50.494-1.019 98.621-1.535 143.152-1.535 44.688 0 92.955.52 143.564 1.544 3.585 23.686 22.202 42.205 45.914 45.657 1.952 47.595 2.023 94.692.209 140.199-11.623 1.659-22.362 7.009-30.791 15.445-8.392 8.401-13.722 19.093-15.394 30.663-11.45.231-22.818.438-33.88.614-4.142.066-7.446 3.478-7.379 7.619s3.513 7.449 7.62 7.379c13.268-.212 26.972-.467 40.734-.756 4.047-.085 7.296-3.365 7.342-7.412.244-21.299 17.765-38.84 39.057-39.103 3.978-.049 7.226-3.195 7.401-7.169 2.204-50.086 2.133-102.149-.215-154.741z" fill="#ffffff" data-original="#000000" class=""/><path d="m256.004 43.38c4.142 0 7.5-3.357 7.5-7.5v-28.38c0-4.143-3.358-7.5-7.5-7.5s-7.5 3.357-7.5 7.5v28.38c-.001 4.142 3.357 7.5 7.5 7.5z" fill="#ffffff" data-original="#000000" class=""/><path d="m161.601 40.607c1.126 3.017 3.987 4.879 7.028 4.879.871 0 1.758-.153 2.622-.476 3.881-1.448 5.853-5.769 4.404-9.649l-9.925-26.587c-1.449-3.881-5.769-5.85-9.649-4.403-3.881 1.448-5.853 5.769-4.404 9.649z" fill="#ffffff" data-original="#000000" class=""/><path d="m74.691 47.612c1.46 2.076 3.782 3.186 6.141 3.186 1.491 0 2.997-.444 4.31-1.367 3.387-2.384 4.202-7.062 1.818-10.449l-16.33-23.209c-2.383-3.39-7.062-4.201-10.45-1.818-3.387 2.384-4.202 7.062-1.818 10.449z" fill="#ffffff" data-original="#000000" class=""/><path d="m340.756 45.011c.865.323 1.751.476 2.622.476 3.041 0 5.902-1.863 7.028-4.879l9.925-26.587c1.449-3.881-.523-8.201-4.404-9.649-3.883-1.451-8.201.523-9.65 4.403l-9.925 26.587c-1.449 3.88.523 8.201 4.404 9.649z" fill="#ffffff" data-original="#000000" class=""/><path d="m426.866 49.431c1.313.924 2.818 1.367 4.31 1.367 2.359 0 4.68-1.11 6.141-3.186l16.33-23.208c2.384-3.388 1.569-8.065-1.818-10.449-3.388-2.385-8.066-1.569-10.45 1.818l-16.33 23.208c-2.385 3.388-1.571 8.066 1.817 10.45z" fill="#ffffff" data-original="#000000" class=""/><path d="m256.004 468.62c-4.142 0-7.5 3.357-7.5 7.5v28.38c0 4.143 3.358 7.5 7.5 7.5s7.5-3.357 7.5-7.5v-28.38c0-4.142-3.358-7.5-7.5-7.5z" fill="#ffffff" data-original="#000000" class=""/><path d="m171.251 466.989c-3.88-1.447-8.2.523-9.65 4.403l-9.924 26.587c-1.449 3.881.523 8.201 4.404 9.649.864.322 1.75.476 2.622.476 3.041 0 5.902-1.863 7.028-4.879l9.924-26.587c1.449-3.88-.523-8.2-4.404-9.649z" fill="#ffffff" data-original="#000000" class=""/><path d="m85.141 462.569c-3.386-2.385-8.066-1.569-10.45 1.818l-16.33 23.209c-2.384 3.388-1.569 8.066 1.818 10.449 1.312.924 2.818 1.367 4.309 1.367 2.358 0 4.68-1.11 6.14-3.186l16.33-23.209c2.385-3.386 1.571-8.065-1.817-10.448z" fill="#ffffff" data-original="#000000" class=""/><path d="m350.406 471.393c-1.449-3.879-5.768-5.85-9.65-4.403-3.881 1.448-5.852 5.769-4.404 9.649l9.925 26.587c1.126 3.016 3.987 4.879 7.028 4.879.872 0 1.757-.153 2.622-.476 3.881-1.448 5.852-5.769 4.404-9.649z" fill="#ffffff" data-original="#000000" class=""/><path d="m437.316 464.388c-2.383-3.387-7.062-4.203-10.45-1.818-3.388 2.383-4.202 7.062-1.818 10.449l16.33 23.209c1.46 2.075 3.782 3.186 6.141 3.186 1.491 0 2.997-.443 4.309-1.367 3.388-2.383 4.202-7.062 1.818-10.449z" fill="#ffffff" data-original="#000000" class=""/><path d="m149.292 204.881c-4.142 0-7.5 3.357-7.5 7.5v71.531c0 13.9 11.307 25.209 25.206 25.209 6.894 0 13.15-2.783 17.705-7.284 4.555 4.501 10.811 7.284 17.705 7.284 13.898 0 25.206-11.309 25.206-25.209v-71.531c0-4.143-3.358-7.5-7.5-7.5s-7.5 3.357-7.5 7.5v71.531c0 5.629-4.578 10.209-10.205 10.209s-10.205-4.58-10.205-10.209v-71.531c0-4.143-3.358-7.5-7.5-7.5s-7.5 3.357-7.5 7.5v71.531c0 5.629-4.578 10.209-10.205 10.209s-10.205-4.58-10.205-10.209v-71.531c-.001-4.143-3.359-7.5-7.502-7.5z" fill="#ffffff" data-original="#000000" class=""/><path d="m259.668 212.381v89.24c0 4.143 3.358 7.5 7.5 7.5s7.5-3.357 7.5-7.5v-89.24c0-4.143-3.358-7.5-7.5-7.5s-7.5 3.357-7.5 7.5z" fill="#ffffff" data-original="#000000" class=""/><path d="m366.668 301.621v-89.24c0-4.143-3.358-7.5-7.5-7.5s-7.5 3.357-7.5 7.5v57.786l-30.932-61.17c-1.566-3.1-5.054-4.714-8.433-3.912-3.377.806-5.761 3.824-5.761 7.296v89.24c0 4.143 3.358 7.5 7.5 7.5s7.5-3.357 7.5-7.5v-57.786l30.932 61.17c1.297 2.566 3.913 4.117 6.692 4.117.577 0 1.161-.067 1.741-.205 3.378-.806 5.761-3.824 5.761-7.296z" fill="#ffffff" data-original="#000000" class=""/><path d="m60.737 143.251c4.143 0 7.502-3.358 7.502-7.5s-3.359-7.5-7.502-7.5c-4.144 0-7.503 3.358-7.503 7.5s3.359 7.5 7.503 7.5z" fill="#ffffff" data-original="#000000" class=""/><path d="m460.582 135.751c0-4.142-3.359-7.5-7.502-7.5-4.144 0-7.503 3.358-7.503 7.5s3.359 7.5 7.503 7.5c4.143 0 7.502-3.358 7.502-7.5z" fill="#ffffff" data-original="#000000" class=""/><path d="m53.234 379.812c0 4.142 3.359 7.5 7.503 7.5 4.143 0 7.502-3.358 7.502-7.5s-3.359-7.5-7.502-7.5c-4.144-.001-7.503 3.357-7.503 7.5z" fill="#ffffff" data-original="#000000" class=""/><path d="m453.08 372.311c-4.144 0-7.503 3.358-7.503 7.5s3.359 7.5 7.503 7.5c4.143 0 7.502-3.358 7.502-7.5s-3.359-7.5-7.502-7.5z" fill="#ffffff" data-original="#000000" class=""/></g></g></svg>
